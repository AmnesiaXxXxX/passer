"""–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –±–æ—Ç–∞"""

import asyncio
import os
from datetime import datetime
from typing import Any, Callable, TypeVar, cast

import PIL
import PIL.Image
import qrcode
from dotenv import load_dotenv
from pyrogram.types import Message
import hashlib

load_dotenv()
T = TypeVar("T")


def get_env_admin_ids() -> list[int | str]:
    """–ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
    ids_str = os.getenv("ADMIN_IDS", "5957115070,831985431")
    return [
        int(x.strip()) if x.strip().isdigit() else x.strip() for x in ids_str.split(",")
    ]


class Utils:
    """–ö–ª–∞—Å—Å —É—Ç–∏–ª–∏—Ç"""

    START_MESSAGE: str = """**üî• –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–∏—Å–∫–æ—Ç–µ–∫–∏ S.T.A.R! üî•**"""
    DATE_FORMAT: str = "%Y-%m-%d"
    DATETIME_FORMAT: str = "%Y-%m-%d %H:%M:%S"
    ADMIN_IDS: list[int | str] = get_env_admin_ids()
    TRUE_CODE = "`‚úÖ –ö–æ–¥ –≤–µ—Ä–Ω—ã–π!`"
    FALSE_CODE = "`‚ùå –ö–æ–¥ –Ω–µ–≤–µ—Ä–Ω—ã–π!`"
    FALSE_CODE_ALREADY_USED = "`‚ùå –ö–æ–¥ —É–∂–µ –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω!`"
    COST = 250

    @staticmethod
    def generate_hash(tg_id: int | str, dt: datetime) -> str:
        """–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ö–µ—à–∞"""
        data = f"{tg_id}{dt.isoformat()}"
        return hashlib.sha256(data.encode()).hexdigest()

    @classmethod
    def update_admin_ids(cls) -> None:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ ADMIN_IDS –∏–∑ .env —Ñ–∞–π–ª–∞"""
        cls.ADMIN_IDS = get_env_admin_ids()

    @staticmethod
    def event_exception_handler(func: Callable[..., T]) -> Callable[..., T]:
        """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–π –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å —Å–æ–±—ã—Ç–∏—è–º–∏"""

        async def async_wrapper(*args: Any, **kwargs: Any) -> T:
            try:
                return await func(*args, **kwargs)
            except ValueError:
                message = next((arg for arg in args if isinstance(arg, Message)), None)
                if message:
                    date = datetime.now().strftime(Utils.DATE_FORMAT)
                    await message.reply(f"**–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞!** \n–ü—Ä–∏–º–µ—Ä: `{date}`")
                raise
            except Exception as e:
                message = next((arg for arg in args if isinstance(arg, Message)), None)
                if message:
                    await message.reply(f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
                raise

        def sync_wrapper(*args: Any, **kwargs: Any) -> T:
            return cast(T, async_wrapper(*args, **kwargs))

        if asyncio.iscoroutinefunction(func):
            return async_wrapper
        return sync_wrapper
    @staticmethod
    def create_qr(data: str | list[str]) -> PIL.Image.Image:
        qr = qrcode.QRCode(
            version=2,
            error_correction=qrcode.ERROR_CORRECT_H,
            box_size=10,
            border=3,
        )
        if isinstance(data, list):
            data_str = " ".join(data)
        else:
            data_str = data
        qr.add_data(data_str)
        qr.make(fit=True)
        img = qr.make_image(fill_color="black", back_color="white")
        return img.get_image()

    @classmethod
    async def gen_qr_code(cls, data: str | list[str]):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è QR-–∫–æ–¥–∞.

        Args:
            data (str | list[str]): –î–∞–Ω–Ω—ã–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–∞. –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è —Å–ø–∏—Å–æ–∫,
                                      –µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç—ã –±—É–¥—É—Ç –æ–±—ä–µ–¥–∏–Ω–µ–Ω—ã –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É.

        Returns:
            PIL.Image.Image: –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ QR-–∫–æ–¥–∞.
        """

        return await asyncio.to_thread(cls.create_qr, data)


#
