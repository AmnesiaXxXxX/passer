from enum import Enum
from typing import Dict, Optional

from pyrogram.types import InlineKeyboardButton, InlineKeyboardMarkup

from classes.database import Database


class Buttons_Menu(Enum):

    @classmethod
    def get(cls, tg_id: int) -> Optional[InlineKeyboardMarkup]:
        db = Database()
        user = db.check_registration_by_tgid

        # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫
        buttons = [
            InlineKeyboardButton(
                f"{date[0]} {'‚úÖ' if user(tg_id, date[0]) else '‚ùå'}",
                f"reg_user_to_{date[0]}",
            )
            for date in db.get_events()
        ]

        # –†–∞–∑–±–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞ –≥—Ä—É–ø–ø—ã –ø–æ 3
        button_rows = [buttons[:3]]

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å–æ–≥–ª–∞—à–µ–Ω–∏—è –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä—è–¥
        button_rows.append(
            [
                InlineKeyboardButton("üìù–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ", "useragreement"),
            ],
        )

        return InlineKeyboardMarkup(button_rows)

    @classmethod
    def get_payment_button(cls, payment_url: str, cost: int):
        return InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton(
                        f"–û–ø–ª–∞—Ç–∏—Ç—å —Å –ø–æ–º–æ—â—å—é –¢-–ë–∞–Ω–∫ ({cost} —Ä.)", url=payment_url
                    )
                ],
                [Buttons_Menu.get_menu()],
            ]
        )

    @staticmethod
    def get_menu():
        return InlineKeyboardButton("üóÑ –í –º–µ–Ω—é", callback_data="open_menu")

    @staticmethod
    def get_menu_markup():
        return InlineKeyboardMarkup([[Buttons_Menu.get_menu()]])
