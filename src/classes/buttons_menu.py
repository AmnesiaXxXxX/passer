"""–ú–æ–¥—É–ª—å –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º SQLAlchemy"""

from datetime import datetime
from typing import Union

from pyrogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from sqlalchemy.orm import Session

from src.classes.database import Database
from src.utils import Utils


class ButtonsMenu:
    """–ö–ª–∞—Å—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é"""

    @staticmethod
    def _decline_tickets(number: int) -> str:
        """–°–∫–ª–æ–Ω—è–µ—Ç —Å–ª–æ–≤–æ '–±–∏–ª–µ—Ç' –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —á–∏—Å–ª–∞"""
        if number % 10 == 1 and number % 100 != 11:
            return "–±–∏–ª–µ—Ç"
        if 2 <= number % 10 <= 4 and (number % 100 < 10 or number % 100 >= 20):
            return "–±–∏–ª–µ—Ç–∞"
        return "–±–∏–ª–µ—Ç–æ–≤"

    @classmethod
    def get_buy_markup(cls, tg_id: Union[int, str]) -> InlineKeyboardMarkup:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –±–∏–ª–µ—Ç–æ–≤"""
        with Database().get_session() as session:
            db = Database()
            buttons: List[InlineKeyboardButton] = []

            # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
            events = db.get_events(show_all=True, show_old=False)

            for event in events:
                # Ensure we're working with actual integer values
                available = int(event.max_visitors) - int(event.visitors_count)
                date_obj = datetime.strptime(str(event.date), Utils.DATE_FORMAT)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                is_registered = db.check_registration_by_tgid(tg_id, date_obj.date())

                # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
                button_text = (
                    f"{date_obj.strftime('%d.%m.%Y')} "
                    f"({available} {cls._decline_tickets(available)})"
                    f"{' ‚úÖ' if is_registered else ''}"
                )

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º callback –¥–∞–Ω–Ω—ã–µ
                if is_registered:
                    callback_data = "reg_error_already_registrate"
                elif available <= 0:
                    callback_data = "reg_error_not_available"
                else:
                    callback_data = f"reg_user_to_{event.date}"

                buttons.append(
                    InlineKeyboardButton(button_text, callback_data=callback_data)
                )

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –º–µ–Ω—é
            buttons.append(cls._get_menu_button())

            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ 1 –≤ —Ä—è–¥
            keyboard: List[List[InlineKeyboardButton | InlineKeyboardButtonBuy]] = [
                [button] for button in buttons
            ]

            return InlineKeyboardMarkup(keyboard)

    @staticmethod
    def get_newsletter_markup(tg_id: Union[int, str]) -> InlineKeyboardMarkup:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
        return InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data=f"send_{tg_id}"),
                    InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="send_cancel"),
                ]
            ]
        )

    @staticmethod
    def get_start_markup() -> InlineKeyboardMarkup:
        """–°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞"""
        return InlineKeyboardMarkup(
            [
                [InlineKeyboardButton("–ö—É–ø–∏—Ç—å –±–∏–ª–µ—Ç—ã", callback_data="buytickets")],
                [
                    InlineKeyboardButton(
                        "üìù –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ", callback_data="useragreement"
                    )
                ],
            ]
        )

    @classmethod
    def get_payment_markup(cls, payment_url: str, cost: int) -> InlineKeyboardMarkup:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã"""
        return InlineKeyboardMarkup(
            [
                [InlineKeyboardButton(f"–û–ø–ª–∞—Ç–∏—Ç—å {cost} ‚ÇΩ", url=payment_url)],
                [cls._get_menu_button()],
            ]
        )

    @staticmethod
    def _get_menu_button() -> InlineKeyboardButton:
        """–ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é"""
        return InlineKeyboardButton("üóÑ –í –º–µ–Ω—é", callback_data="menu")

    @staticmethod
    def get_menu_markup() -> InlineKeyboardMarkup:
        """–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –º–µ–Ω—é"""
        return InlineKeyboardMarkup([[ButtonsMenu._get_menu_button()]])
