from datetime import datetime
from enum import Enum

from pyrogram.types import InlineKeyboardButton, InlineKeyboardMarkup

from classes.database import Database
from utils import Utils


class Buttons_Menu(Enum):
    @staticmethod
    def decline_tickets(number: int) -> str:
        """
        –°–∫–ª–æ–Ω—è–µ—Ç —Å–ª–æ–≤–æ "–±–∏–ª–µ—Ç" –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —á–∏—Å–ª–∞.
        –ü—Ä–∏–º–µ—Ä—ã:
            1 –±–∏–ª–µ—Ç
            2 –±–∏–ª–µ—Ç–∞
            5 –±–∏–ª–µ—Ç–æ–≤
            21 –±–∏–ª–µ—Ç
            22 –±–∏–ª–µ—Ç–∞
            25 –±–∏–ª–µ—Ç–æ–≤
        """
        if number % 10 == 1 and number % 100 != 11:
            return "–±–∏–ª–µ—Ç"
        elif 2 <= number % 10 <= 4 and (number % 100 < 10 or number % 100 >= 20):
            return "–±–∏–ª–µ—Ç–∞"
        else:
            return "–±–∏–ª–µ—Ç–æ–≤"

    @classmethod
    def get_buy_markup(cls, tg_id: int | str):
        db = Database()
        user = db.check_registration_by_tgid
        buttons = []

        for date in db.get_events(display_all=True, show_old=False):
            available = db.get_available_slots(date[0])
            button_text = f"{datetime.strptime(date[0], Utils.DATE_FORMAT).strftime('%d.%m.%Y')} ({available} {Buttons_Menu.decline_tickets(available)}) {'‚úÖ' if user(tg_id, date[0]) else ''}"

            button = InlineKeyboardButton(
                button_text,
                f"reg_user_to_{date[0]}" if date[2] - date[1] > 0 else "reg_error",
            )
            buttons.append(button)

        buttons.append(Buttons_Menu.get_menu())

        # –†–∞–∑–±–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞ –≥—Ä—É–ø–ø—ã –ø–æ 3
        return InlineKeyboardMarkup(
            [buttons[i : i + 1] for i in range(0, len(buttons))]
        )

    @classmethod
    def get_start_markup(cls) -> InlineKeyboardMarkup:
        return InlineKeyboardMarkup(
            [
                [InlineKeyboardButton("–ö—É–ø–∏—Ç—å –±–∏–ª–µ—Ç—ã", "buytickets")],
                [
                    InlineKeyboardButton(
                        "üìù–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ", "useragreement"
                    ),
                ],
            ]
        )

    @classmethod
    def get_payment_button(cls, payment_url: str, cost: int):
        return InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton(
                        f"–û–ø–ª–∞—Ç–∏—Ç—å —Å –ø–æ–º–æ—â—å—é –¢-–ë–∞–Ω–∫ ({cost} —Ä.)", url=payment_url
                    )
                ],
                [Buttons_Menu.get_menu()],
            ]
        )

    @staticmethod
    def get_menu():
        return InlineKeyboardButton("üóÑ –í –º–µ–Ω—é", callback_data="menu")

    @staticmethod
    def get_menu_markup():
        return InlineKeyboardMarkup([[Buttons_Menu.get_menu()]])
