"""–ú–æ–¥—É–ª—å –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é"""

from typing import List, Union
from datetime import datetime

from pyrogram.client import Client
from pyrogram.types import (
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    InlineKeyboardButtonBuy,
    Message,
)

from src.classes.database import Database
from src.utils import Utils


class ButtonsMenu:
    """–ö–ª–∞—Å—Å –∫–Ω–æ–ø–æ–∫"""

    @staticmethod
    def decline_tickets(number: int) -> str:
        """
        –°–∫–ª–æ–Ω—è–µ—Ç —Å–ª–æ–≤–æ "–±–∏–ª–µ—Ç" –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —á–∏—Å–ª–∞.
        –ü—Ä–∏–º–µ—Ä—ã:
            1 –±–∏–ª–µ—Ç
            2 –±–∏–ª–µ—Ç–∞
            5 –±–∏–ª–µ—Ç–æ–≤
            21 –±–∏–ª–µ—Ç
            22 –±–∏–ª–µ—Ç–∞
            25 –±–∏–ª–µ—Ç–æ–≤
        """
        if number % 10 == 1 and number % 100 != 11:
            return "–±–∏–ª–µ—Ç"
        if 2 <= number % 10 <= 4 and (number % 100 < 10 or number % 100 >= 20):
            return "–±–∏–ª–µ—Ç–∞"
        return "–±–∏–ª–µ—Ç–æ–≤"

    @classmethod
    def get_buy_markup(cls, tg_id: int | str):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Ä–∫–∞–ø –∫–Ω–æ–ø–æ–∫ –¥–ª—è –ø–æ–∫—É–ø–∫–∏"""
        db = Database()
        check = db.check_registration_by_tgid
        buttons: List[Union[InlineKeyboardButton, InlineKeyboardButtonBuy]] = []

        for date in db.get_events(display_all=True, show_old=False):
            available = db.get_available_slots(date[0])
            button_text = (
                f"{datetime.strptime(date[0], Utils.DATE_FORMAT).strftime('%d.%m.%Y')}"
                f"({available} {ButtonsMenu.decline_tickets(available)})"
                f"{'‚úÖ' if check(tg_id, date[0], is_active=None) else ''}"
            )
            callback_text = (
                f"reg_user_to_{date[0]}" if date[2] - date[1] > 0 else "reg_error"
            )
            if check(tg_id, date[0], True):
                callback_text = "reg_error_already_registrate"
            button = InlineKeyboardButton(
                button_text,
                callback_text,
            )
            buttons.append(button)

        buttons.append(ButtonsMenu.get_menu())
        result = [buttons[i : i + 1] for i in range(0, len(buttons))]
        # –†–∞–∑–±–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞ –≥—Ä—É–ø–ø—ã –ø–æ 3
        return InlineKeyboardMarkup(result)

    @staticmethod
    def get_newsletter_markup(tg_id: int | str) -> InlineKeyboardMarkup:
        return InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å", f"send_{tg_id}"),
                    InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", f"send_cancel"),
                ],
            ]
        )

    @staticmethod
    def get_start_markup() -> InlineKeyboardMarkup:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –º–∞—Ä–∫–∞–ø —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
        return InlineKeyboardMarkup(
            [
                [InlineKeyboardButton("–ö—É–ø–∏—Ç—å –±–∏–ª–µ—Ç—ã", "buytickets")],
                [
                    InlineKeyboardButton(
                        "üìù–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ", "useragreement"
                    ),
                ],
            ]
        )

    @classmethod
    def get_payment_button(cls, payment_url: str, cost: int):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–Ω–æ–ø–∫—É –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ –¢-–ë–∞–Ω–∫"""
        return InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton(
                        f"–û–ø–ª–∞—Ç–∏—Ç—å —Å –ø–æ–º–æ—â—å—é –¢-–ë–∞–Ω–∫ ({cost} —Ä.)", url=payment_url
                    )
                ],
                [ButtonsMenu.get_menu()],
            ]
        )

    @staticmethod
    def get_menu():
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–Ω–æ–ø–∫—É –º–µ–Ω—é"""
        return InlineKeyboardButton("üóÑ –í –º–µ–Ω—é", callback_data="menu")

    @staticmethod
    def get_menu_markup():
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Ä–∫–∞–ø –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é"""
        return InlineKeyboardMarkup([[ButtonsMenu.get_menu()]])
